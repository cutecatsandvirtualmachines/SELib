#pragma once

namespace vmx {
    typedef enum _EXCEPTION_VECTOR
    {
        EXCEPTION_VECTOR_DIVIDE_ERROR,
        EXCEPTION_VECTOR_DEBUG_BREAKPOINT,
        EXCEPTION_VECTOR_NMI,
        EXCEPTION_VECTOR_BREAKPOINT,
        EXCEPTION_VECTOR_OVERFLOW,
        EXCEPTION_VECTOR_BOUND_RANGE_EXCEEDED,
        EXCEPTION_VECTOR_UNDEFINED_OPCODE,
        EXCEPTION_VECTOR_NO_MATH_COPROCESSOR,
        EXCEPTION_VECTOR_DOUBLE_FAULT,
        EXCEPTION_VECTOR_RESERVED0,
        EXCEPTION_VECTOR_INVALID_TASK_SEGMENT_SELECTOR,
        EXCEPTION_VECTOR_SEGMENT_NOT_PRESENT,
        EXCEPTION_VECTOR_STACK_SEGMENT_FAULT,
        EXCEPTION_VECTOR_GENERAL_PROTECTION_FAULT,
        EXCEPTION_VECTOR_PAGE_FAULT,
        EXCEPTION_VECTOR_RESERVED1,
        EXCEPTION_VECTOR_MATH_FAULT,
        EXCEPTION_VECTOR_ALIGNMENT_CHECK,
        EXCEPTION_VECTOR_MACHINE_CHECK,
        EXCEPTION_VECTOR_SIMD_FLOATING_POINT_NUMERIC_ERROR,
        EXCEPTION_VECTOR_VIRTUAL_EXCEPTION,
        EXCEPTION_VECTOR_RESERVED2,
        EXCEPTION_VECTOR_RESERVED3,
        EXCEPTION_VECTOR_RESERVED4,
        EXCEPTION_VECTOR_RESERVED5,
        EXCEPTION_VECTOR_RESERVED6,
        EXCEPTION_VECTOR_RESERVED7,
        EXCEPTION_VECTOR_RESERVED8,
        EXCEPTION_VECTOR_RESERVED9,
        EXCEPTION_VECTOR_RESERVED10,
        EXCEPTION_VECTOR_RESERVED11,
        EXCEPTION_VECTOR_RESERVED12
    } EXCEPTION_VECTOR, * PEXCEPTION_VECTOR;
}